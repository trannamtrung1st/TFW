// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CleanArchitecture.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("_Init datasets")]
    public partial class _InitDatasetsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "InitDataSets.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "_Init datasets", "\tInit datasets for the whole projects", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Init datasets \"default\"")]
        public virtual void InitDatasetsDefault()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Init datasets \"default\"", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("the name of new dataset is \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name"});
                table1.AddRow(new string[] {
                            "1",
                            "Martin Fowler"});
                table1.AddRow(new string[] {
                            "2",
                            "Uncle Bob"});
                table1.AddRow(new string[] {
                            "3",
                            "Kent Beck"});
#line 6
 testRunner.And("the following Customers", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name"});
                table2.AddRow(new string[] {
                            "1",
                            "Eric Evans"});
                table2.AddRow(new string[] {
                            "2",
                            "Greg Young"});
                table2.AddRow(new string[] {
                            "3",
                            "Udi Dahan"});
#line 11
 testRunner.And("the following Employees", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Unit Price",
                            "Deleted"});
                table3.AddRow(new string[] {
                            "1",
                            "Spaghetti",
                            "5.00",
                            "false"});
                table3.AddRow(new string[] {
                            "2",
                            "Lasagna",
                            "10.00",
                            "false"});
                table3.AddRow(new string[] {
                            "3",
                            "Ravioli",
                            "15.00",
                            "false"});
#line 16
 testRunner.And("the following Products", ((string)(null)), table3, "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Date",
                            "Customer",
                            "Employee",
                            "Product",
                            "Unit Price",
                            "Quantity",
                            "Total Price"});
                table4.AddRow(new string[] {
                            "1",
                            "2001-02-03",
                            "Martin Fowler",
                            "Eric Evans",
                            "Spaghetti",
                            "5.00",
                            "1",
                            "5.00"});
                table4.AddRow(new string[] {
                            "2",
                            "2001-02-04",
                            "Uncle Bob",
                            "Greg Young",
                            "Lasagna",
                            "10.00",
                            "2",
                            "20.00"});
                table4.AddRow(new string[] {
                            "3",
                            "2001-02-05",
                            "Kent Beck",
                            "Udi Dahan",
                            "Ravioli",
                            "15.00",
                            "3",
                            "45.00"});
#line 21
 testRunner.And("the following Sales", ((string)(null)), table4, "And ");
#line hidden
#line 26
 testRunner.When("init the dataset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then("it should be added to the list of datasets successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Init datasets \"alternative\"")]
        public virtual void InitDatasetsAlternative()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Init datasets \"alternative\"", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("the name of new dataset is \"alternative\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name"});
                table5.AddRow(new string[] {
                            "1",
                            "Martin Fowler"});
                table5.AddRow(new string[] {
                            "2",
                            "Kent Beck"});
                table5.AddRow(new string[] {
                            "3",
                            "TNT"});
#line 31
 testRunner.And("the following Customers", ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name"});
                table6.AddRow(new string[] {
                            "1",
                            "Eric Evans"});
                table6.AddRow(new string[] {
                            "2",
                            "Michael Kevin"});
                table6.AddRow(new string[] {
                            "3",
                            "Udi Dahan"});
#line 36
 testRunner.And("the following Employees", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Unit Price"});
                table7.AddRow(new string[] {
                            "1",
                            "Mì trộn",
                            "5.00"});
                table7.AddRow(new string[] {
                            "2",
                            "Cơm nấm",
                            "10.00"});
                table7.AddRow(new string[] {
                            "3",
                            "Ravioli",
                            "15.00"});
#line 41
 testRunner.And("the following Products", ((string)(null)), table7, "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Date",
                            "Customer",
                            "Employee",
                            "Product",
                            "Unit Price",
                            "Quantity",
                            "Total Price"});
                table8.AddRow(new string[] {
                            "1",
                            "2001-02-03",
                            "Martin Fowler",
                            "Eric Evans",
                            "Mì trộn",
                            "5.00",
                            "1",
                            "5.00"});
                table8.AddRow(new string[] {
                            "2",
                            "2001-02-04",
                            "TNT",
                            "Michael Kevin",
                            "Cơm nấm",
                            "10.00",
                            "2",
                            "20.00"});
                table8.AddRow(new string[] {
                            "3",
                            "2001-02-05",
                            "Kent Beck",
                            "Udi Dahan",
                            "Ravioli",
                            "15.00",
                            "3",
                            "45.00"});
#line 46
 testRunner.And("the following Sales", ((string)(null)), table8, "And ");
#line hidden
#line 51
 testRunner.When("init the dataset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("it should be added to the list of datasets successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
